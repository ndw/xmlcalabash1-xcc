buildscript {
  repositories {
    mavenCentral()
  }

  dependencies {
    classpath group: 'net.sf.saxon', name: 'Saxon-HE', version: saxonVersion
  }
}

plugins {
  id "java"
  id "osgi"
  id "maven"
  id "signing"
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url "https://maven.restlet.com" }
}

configurations {
  copydep {
    extendsFrom runtime
  }
  copydep.exclude module: 'xmlcalabash'
  copydep.exclude module: 'nwalsh-annotations'
}

dependencies {
  compile (
    [group: 'com.marklogic', name: 'marklogic-xcc', version: '9.0.7'],
    [group: 'com.nwalsh', name: 'nwalsh-annotations', version: '1.0.0'],
    [group: 'com.xmlcalabash', name: 'xmlcalabash', version: '1.1.22-98'],
  )
}

// Variables
project.ext.saxonRelease = saxonVersion.substring(0,5)
project.ext.saxonBranch  = saxonVersion.substring(0,3).replaceAll("\\.", "")
project.ext.releaseVersion = version
project.ext.distVersion = version + snapshot
version = project.ext.distVersion // - gets turned into . in some contexts

// Make explicit use of annotationProcessorPath to satisfy Gradle.
// Maybe it's possible to do better than "configurations.compile", but the
// implementation uses annotations to find step implementations, so there's
// going to be a lot of them.
compileJava {
    options.compilerArgs += ['-Xlint:deprecation']
    options.annotationProcessorPath = configurations.compile
}

compileTestJava {
    options.annotationProcessorPath = configurations.compile
}

task copyLib(type: Copy) {
  FileCollection lib = configurations.copydep
  String path = ""
  lib.each {
    File file -> path += " lib/" + file.name
  }
  project.ext.runtimeClasspath = path.trim()

  from lib
  into { "build/dist/lib" }
}

jar {
  manifest {
    instruction 'Built-By', builtBy
    instruction 'Implementation-Vendor', 'Norman Walsh'
    instruction 'Implementation-Title', 'XML Calabash MarkLogic XCC Steps'
    instruction 'Implementation-Version', distVersion
    instruction 'Bundle-SymbolicName', 'com.xmlcalabash.extensions.marklogic'
    instruction 'Bundle-RequiredExecutionEnvironment', 'J2SE-1.7'
    instruction 'Export-Package', '*, etc'
    instruction 'Import-Package', 'net.sf.saxon.*;version=' + project.ext.saxonRelease + ',\
  javax.crypto.*,\
  javax.xml.*,\
  org.apache.commons.httpclient.*,\
  org.xml.sax.*,\
  *;resolution:=optional'
    instruction 'DynamicImport-Package', '*'
    instruction 'Class-Path', project.ext.runtimeClasspath + " lib"
  }
}

task copyNotices(type: Copy) {
  from 'resources/notices'
  into 'build/dist/docs/notices'
}
jar.dependsOn copyNotices

task copyStuff(type: Copy) {
  from 'README.md'
  from 'LICENSE.md'
  into 'build/dist'
}

task copyToDist(dependsOn: [copyLib,copyStuff]) {
  // nop
}
jar.dependsOn copyToDist

task javadocJar(type: Jar, dependsOn: javadoc) {
    from tasks.javadoc.destinationDir
    classifier = 'javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task copyJar(dependsOn: jar, type: Copy) {
  from "build/libs/xmlcalabash1-xcc-" + distVersion + ".jar"
  into "build/dist"
}

task copyJavaDoc(dependsOn: javadoc, type: Copy) {
  from "build/docs"
  into "build/dist/docs"
}

task testSetup(type: JavaExec) {
  classpath = configurations.copydep + configurations.runtime \
              + sourceSets.main.output

  main = 'com.xmlcalabash.drivers.Main'
  maxHeapSize = "1024m"
  args('-D', '-a', 'src/test/resources/setup.xpl')
}

task testAdhoc(type: JavaExec, dependsOn: [ "testSetup" ]) {
  classpath = configurations.copydep + configurations.runtime \
              + sourceSets.main.output

  main = 'com.xmlcalabash.drivers.Main'
  maxHeapSize = "1024m"
  args('-D', '-a', 'src/test/resources/adhoc.xpl')
}
test.dependsOn testAdhoc

task testInvoke(type: JavaExec, dependsOn: [ "testSetup" ]) {
  classpath = configurations.copydep + configurations.runtime \
              + sourceSets.main.output

  systemProperties System.properties
  main = 'com.xmlcalabash.drivers.Main'
  maxHeapSize = "1024m"
  args('-D', '-a', 'src/test/resources/invoke.xpl')
}
test.dependsOn testInvoke

task testInsert(type: JavaExec, dependsOn: [ "testSetup" ]) {
  classpath = configurations.copydep + configurations.runtime \
              + sourceSets.main.output

  main = 'com.xmlcalabash.drivers.Main'
  maxHeapSize = "1024m"
  args('-D', '-a', 'src/test/resources/insert.xpl')
}
test.dependsOn testInsert

task makeDist(dependsOn: [ build, copyJar, copyLib ]) {
  doLast {
    println "Created distribution in build/dist"
  }
}

task zipDist(dependsOn: makeDist, type: Zip) {
  from('build/dist')
  into 'xmlcalabash1-xcc-' + distVersion
  archiveName 'xmlcalabash1-xcc-' + distVersion + ".zip"
}

task dist(dependsOn: [test, zipDist]) {
  // nop
}

artifacts {
  archives javadocJar
  archives sourcesJar
}

signing {
  required { gradle.taskGraph.hasTask("uploadArchives") }
  sign configurations.archives
}

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment ->
        signing.signPom(deployment) }

      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: sonatypeUsername, password: sonatypePassword)
      }

      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        authentication(userName: sonatypeUsername, password: sonatypePassword)
      }

      pom.project {
        name 'XML Calabash MarkLogic XCC Steps'
        packaging 'jar'
        description 'XML Calabash extension steps to communicate with MarkLogic server'
        url 'https://github.com/ndw/xmlcalabash1-xcc'

        scm {
          url 'scm:git@github.com:ndw/xmlcalabash1-xcc.git'
          connection 'scm:git@github.com:ndw/xmlcalabash1-xcc.git'
          developerConnection 'scm:git@github.com:ndw/xmlcalabash1-xcc.git'
        }

        licenses {
          license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
          }
        }

        developers {
          developer {
            id 'ndw'
            name 'Norman Walsh'
          }
        }
      }
    }
  }
}
